// <auto-generated />
using System;
using CTAM.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CloudAPI.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20211215142529_AddedCabinetErrorMessage")]
    partial class AddedCabinetErrorMessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CTAMRole_Cabinet", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("CTAMRoleID", "CabinetNumber");

                    b.HasIndex("CabinetNumber", "CTAMRoleID")
                        .IsUnique();

                    b.ToTable("CTAMRole_Cabinet","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.Cabinet", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CabinetConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CabinetErrorMessage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("CabinetType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CabinetUIUpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationDescr")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("LoginMethod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("Cabinet","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAccessInterval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("EndWeekDayNr")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("StartWeekDayNr")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CTAMRoleID");

                    b.ToTable("CabinetAccessIntervals","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CabinetName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetAction","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCell", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CabinetCellTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CabinetColumnID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CabinetCellTypeID");

                    b.HasIndex("CabinetColumnID");

                    b.ToTable("CabinetCell","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCellType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LockType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LongDescr")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ShortDescr")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SpecCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("SpecType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ShortDescr")
                        .IsUnique()
                        .HasFilter("[ShortDescr] IS NOT NULL");

                    b.HasIndex("SpecCode")
                        .IsUnique()
                        .HasFilter("[SpecCode] IS NOT NULL");

                    b.ToTable("CabinetCellType","Cabinet");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Color = "None",
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Depth = 30.0,
                            Height = 30.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 30x30x30",
                            SpecCode = "L30",
                            SpecType = 0,
                            Width = 30.0
                        },
                        new
                        {
                            ID = 2,
                            Color = "None",
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Depth = 0.0,
                            Height = 0.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Insert",
                            ShortDescr = "KeyCop Insert",
                            SpecCode = "I",
                            SpecType = 1,
                            Width = 0.0
                        },
                        new
                        {
                            ID = 3,
                            Color = "Red",
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Depth = 30.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 30x15x30",
                            SpecCode = "L15",
                            SpecType = 0,
                            Width = 30.0
                        },
                        new
                        {
                            ID = 4,
                            Color = "Red",
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Depth = 45.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 45x45x15",
                            SpecCode = "L45",
                            SpecType = 0,
                            Width = 45.0
                        },
                        new
                        {
                            ID = 5,
                            Color = "Red",
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Depth = 45.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 45x20x15",
                            SpecCode = "L20",
                            SpecType = 0,
                            Width = 20.0
                        });
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetColumn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CabinetNumber");

                    b.ToTable("CabinetColumn","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetDoor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("ClosedLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("GPIOPortDoorControl")
                        .HasColumnType("int");

                    b.Property<int>("GPIOPortDoorState")
                        .HasColumnType("int");

                    b.Property<int>("MaxOpenDuration")
                        .HasColumnType("int");

                    b.Property<int>("UnlockDuration")
                        .HasColumnType("int");

                    b.Property<bool>("UnlockLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetDoor","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CabinetName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetLog","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BladeNo")
                        .HasColumnType("int");

                    b.Property<int>("BladePosNo")
                        .HasColumnType("int");

                    b.Property<int>("CabinetCellTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CabinetDoorID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsAllocated")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNrOfItems")
                        .HasColumnType("int");

                    b.Property<string>("PositionAlias")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("PositionNumber")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CabinetCellTypeID");

                    b.HasIndex("CabinetDoorID");

                    b.HasIndex("CabinetNumber", "PositionAlias")
                        .IsUnique()
                        .HasFilter("[PositionAlias] IS NOT NULL");

                    b.HasIndex("CabinetNumber", "PositionNumber")
                        .IsUnique();

                    b.ToTable("CabinetPosition","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetProperties", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("HwApiVersion")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LocalApiVersion")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LocalUiVersion")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("CabinetProperties","Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetUI", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ColorTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Font")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoBlack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoWhite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("CabinetUI","Cabinet");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.InterfaceQueue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("MessageBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("InterfaceQueue","Communication");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailMarkupTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MailMarkupTemplate","Communication");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 677, DateTimeKind.Utc).AddTicks(3424),
                            Name = "default_ct",
                            Template = @"<div>
  <span style='font-size:11pt;'>
  <p style='font-size:11pt;font-family:Calibri,sans-serif;margin:0;'>
    {{body}}
    <br/><br/><br/>


  </p>
    <img src='https://www.capturetech.com/wp-content/uploads/2020/03/Logo-Capturetech-nopayoff.png' border='0' style='cursor: pointer; max-width: 200px; height: auto;'><br>
  </span></p>
  <table border='0' cellspacing='0' cellpadding='0' style='width:59.76%;height:105px;'>
    <tbody>
      <tr>
        <td valign='top' style='font-size:11pt;font-family:Calibri;width:100%;'>HQ Nederland</td>
      </tr>
      <tr>
        <td valign='top' style='font-size:11pt;font-family:Calibri;width:100%;'>Lireweg 42, 2153 PH Nieuw-Vennep<br>
        The Netherlands<strong></strong></td>
      </tr>
      <tr>
        <td valign='top' style='font-size:11pt;font-family:Calibri;width:100%;'>+31 (0) 252 241 544</td>
      </tr>
      <tr>
        <td valign='top' style='font-size:11pt;font-family:Calibri;width:100%;'>
          <a href='http://www.capturetech.com/' target='_blank' rel='noopener noreferrer' data-auth='NotApplicable'>www.capturetech.com</a>
        </td>
      </tr>
    </tbody>
  </table>
  <span><a href='https://twitter.com/capturetechnl/' target='_blank' rel='noopener noreferrer' data-auth='NotApplicable'><img src='https://ctrdeuwctamdevsalocalui.blob.core.windows.net/mail-markup/twitter.png' style='cursor: pointer; width: 24px; height: 24px;'></a> 
  <a href='https://www.linkedin.com/company/capturetech/' target='_blank' rel='noopener noreferrer' data-auth='NotApplicable'><img src='https://ctrdeuwctamdevsalocalui.blob.core.windows.net/mail-markup/linkedin.png' style='cursor: pointer; width: 24px; height: 24px;'></a> 
  <a href='https://www.youtube.com/channel/UCA_hKzBYnr3UHDC0Cp0u2kQ' target='_blank' rel='noopener noreferrer' data-auth='NotApplicable'><img src='https://ctrdeuwctamdevsalocalui.blob.core.windows.net/mail-markup/youtube.png' style='cursor: pointer; width: 24px; height: 24px;'></a></span>  
  <br>
</div>"
                        });
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailQueue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<string>("LastFailedErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailCC")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("MailMarkupTemplateID")
                        .HasColumnType("int");

                    b.Property<string>("MailTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Prio")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.HasIndex("MailMarkupTemplateID");

                    b.ToTable("MailQueue","Communication");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode", "Name")
                        .IsUnique();

                    b.ToTable("MailTemplate","Communication");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "welcome_web_and_cabinet_login",
                            Subject = "Welkom bij CTAM - uw inloggegevens",
                            Template = "Beste {{name}},<br/><br/>Welkom bij CTAM!<br/><br/>Uw inloggegevens<br/>Gebruikersnaam: {{email}}<br/>Tijdelijke wachtwoord: {{password}}<br/>Login code: {{loginCode}}<br/>Pincode: {{pinCode}}"
                        },
                        new
                        {
                            ID = 2,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "welcome_web_and_cabinet_login",
                            Subject = "Welcome to CTAM - your login data",
                            Template = "Dear {{name}},<br/><br/>Welcome to CTAM!<br/><br/>Your login details<br/>Username: {{email}}<br/>Temporary password: {{password}}<br/>Login code: {{loginCode}}<br/>Pin code: {{pinCode}}"
                        },
                        new
                        {
                            ID = 3,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "welcome_web_login",
                            Subject = "Welkom bij CTAM - uw inloggegevens",
                            Template = "Beste {{name}},<br/><br/>Welkom bij CTAM!<br/><br/>Uw inloggegevens<br/>Gebruikersnaam: {{email}}<br/>Tijdelijke wachtwoord: {{password}}"
                        },
                        new
                        {
                            ID = 4,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "welcome_web_login",
                            Subject = "Welcome to CTAM - your login data",
                            Template = "Dear {{name}},<br/><br/>Welcome to CTAM!<br/><br/>Your login details<br/>Username: {{email}}<br/>Temporary password: {{password}}"
                        },
                        new
                        {
                            ID = 5,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "temporary_password",
                            Subject = "Reset wachtwoord",
                            Template = "Beste {{name}},<br/><br/>Uw tijdelijke wachtwoord is {{password}}<br/>Verander die gelijk na het inloggen!"
                        },
                        new
                        {
                            ID = 6,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "temporary_password",
                            Subject = "Reset password",
                            Template = "Dear {{name}},<br/><br/>Your temporary password is {{password}}<br/>Change it as soon as you login!"
                        },
                        new
                        {
                            ID = 7,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "password_changed",
                            Subject = "Nieuw wachtwoord",
                            Template = "Beste {{name}},<br/><br/>Uw wachtwoord wijziging is succesvol doorgevoerd!"
                        },
                        new
                        {
                            ID = 8,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "password_changed",
                            Subject = "New password",
                            Template = "Dear {{name}},<br/><br/>Your password has been changed successfully!"
                        },
                        new
                        {
                            ID = 9,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "forgot_password",
                            Subject = "Wachtwoord vergeten",
                            Template = "Beste {{name}},<br/><br/>Klik op de onderstaande link om uw wachtwoord te wijzigen.<br/><br/><a href='{{link}}' target='_blank'>Wachtwoord wijzigen</a><br/><br/>U ontvangt deze e-mail omdat u onlangs op de knop 'Wachtwoord vergeten' hebt gedrukt op de website van CaptureTech. Als u deze wijziging niet heeft doorgevoerd, neem dan onmiddellijk contact op met uw beheerder."
                        },
                        new
                        {
                            ID = 10,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "forgot_password",
                            Subject = "Forgot password",
                            Template = "Dear {{name}},<br/><br/>Click the link below to change your password.<br/><br/><a href='{{link}}' target='_blank'>Change password</a><br/><br/>You’re receiving this email because you recently pressed 'Forgot password' button on website of CaptureTech. If you did not initiate this change, please contact your administrator immediately."
                        },
                        new
                        {
                            ID = 11,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "user_modified",
                            Subject = "Uw aanpassingen",
                            Template = "Beste {{name}},<br/><br/>Bekijk hieronder uw aanpassingen:<br/><br/><table>{{changes}}</table>"
                        },
                        new
                        {
                            ID = 12,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "user_modified",
                            Subject = "Your changes",
                            Template = "Dear {{name}},<br/><br/>Review your changes below:<br/><br/><table>{{changes}}</table>"
                        },
                        new
                        {
                            ID = 13,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "user_deleted",
                            Subject = "Uw CTAM account is verwijderd",
                            Template = "Beste {{name}},<br/><br/>Uw CTAM account is verwijderd door de administrator."
                        },
                        new
                        {
                            ID = 14,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "user_deleted",
                            Subject = "Your CTAM account is deleted",
                            Template = "Dear {{name}},<br/><br/>Your CTAM account is deleted by the administrator"
                        },
                        new
                        {
                            ID = 15,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "stock_below_minimum",
                            Subject = "IBK voorraad onder minimum aantal",
                            Template = "Beste IBK beheerder,<br/><br/>De voorraad van item type '{{itemTypeDescription}}' in IBK '{{cabinetNumber}}, {{cabinetName}}' op locatie '{{cabinetLocationDescr}}' is minder ({{actualStock}}) dan de opgegeven minimale voorraad ({{minimalStock}})."
                        },
                        new
                        {
                            ID = 16,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "stock_below_minimum",
                            Subject = "Cabinet stock below minimal",
                            Template = "Dear cabinet administrator,<br/><br/>The cabinet stock of {{itemTypeDescription}} in cabinet '{{cabinetNumber}}, {{cabinetName}}' at location '{{cabinetLocationDescr}}' is below ({{actualStock}}) the minimal stock ({{minimalStock}})."
                        },
                        new
                        {
                            ID = 17,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "stock_at_minimum_level",
                            Subject = "IBK voorraad weer op minimum aantal",
                            Template = "Beste IBK beheerder,<br/><br/>De voorraad van item type '{{itemTypeDescription}}' in IBK '{{cabinetNumber}}, {{cabinetName}}' op locatie '{{cabinetLocationDescr}}' is weer op het opgegeven minimale voorraad ({{minimalStock}} niveau)."
                        },
                        new
                        {
                            ID = 18,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "stock_at_minimum_level",
                            Subject = "Cabinet stock returned at minimal level",
                            Template = "Dear cabinet administrator,<br/><br/>The cabinet stock of {{itemTypeDescription}} in cabinet '{{cabinetNumber}}, {{cabinetName}}' at location '{{cabinetLocationDescr}}' is has reached the minimal stock ({{minimalStock}} level)."
                        },
                        new
                        {
                            ID = 19,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "item_status_changed_to_defect",
                            Subject = "Persoonlijke item defect gemeld",
                            Template = "Beste IBK beheerder, <br/><br/>Persoonlijke item '{{itemDescription}}' van type '{{itemTypeDescription}}' is defect gemeld door gebruiker '{{userName}}' met errorcode:  '{{errorCodeDescription}}'. <br/><br/>U kunt het ophalen aan de IBK '{{cabinetName}}' op positie '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 20,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "item_status_changed_to_defect",
                            Subject = "Personal item reported defect",
                            Template = "Dear cabinet administrator, <br/><br/>Personal item '{{itemDescription}}' of type '{{itemTypeDescription}}' is reported defect by user '{{userName}}' with errorcode:  '{{errorCodeDescription}}'. <br/><br/>You can pick it up at cabinet '{{cabinetName}}' on position '{{positionAlias}}'."
                        });
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.AllowedCabinetPosition", b =>
                {
                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBaseCabinetPosition")
                        .HasColumnType("bit");

                    b.HasKey("CabinetPositionID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("AllowedCabinetPosition","ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserInPossession", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CTAMUserEmailIn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserEmailOut")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserNameIn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserNameOut")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserUIDIn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CTAMUserUIDOut")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CabinetNameIn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CabinetNameOut")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CabinetNumberIn")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CabinetNumberOut")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("CabinetPositionIDIn")
                        .HasColumnType("int");

                    b.Property<int?>("CabinetPositionIDOut")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("InDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnBeforeDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("CTAMUserInPossession","ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserPersonalItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CTAMUserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CabinetName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplacementItemID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ReplacementItemID");

                    b.ToTable("CTAMUserPersonalItem","ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetPositionContent", b =>
                {
                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetPositionID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("CabinetPositionContent","ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetStock", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ActualStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimalStock")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber", "ItemTypeID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("CabinetStock","ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.ItemToPick", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CTAMUserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("CabinetPositionID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemToPick","ItemCabinet");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.CTAMRole_ItemType", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("MaxQtyToPick")
                        .HasColumnType("int");

                    b.HasKey("CTAMRoleID", "ItemTypeID");

                    b.HasIndex("ItemTypeID");

                    b.HasIndex("CTAMRoleID", "ItemTypeID")
                        .IsUnique();

                    b.ToTable("CTAMRole_ItemType","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ErrorCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasFilter("[Description] IS NOT NULL");

                    b.ToTable("ErrorCode","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowReservations")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ErrorCodeID")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxLendingTimeInMins")
                        .HasColumnType("int");

                    b.Property<int>("NrOfSubItems")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tagnumber")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("ErrorCodeID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Item","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FreeText1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ID", "ItemID")
                        .IsUnique();

                    b.ToTable("ItemDetail","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemSet", b =>
                {
                    b.Property<string>("SetCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("SetCode", "ItemID");

                    b.HasIndex("ItemID")
                        .IsUnique();

                    b.HasIndex("SetCode", "ItemID")
                        .IsUnique();

                    b.ToTable("ItemSet","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsStoredInLocker")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLendingTimeInMins")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresMileageRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("ItemType","Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType_ErrorCode", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ErrorCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemTypeID", "ErrorCodeID");

                    b.HasIndex("ErrorCodeID");

                    b.ToTable("ItemType_ErrorCode","Item");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.Mileage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("MaxDeltaMileage")
                        .HasColumnType("int");

                    b.Property<int>("ServiceMileage")
                        .HasColumnType("int");

                    b.Property<string>("UoM")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("Mileage","Mileage");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.MileageRegistration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MileageID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserMileage")
                        .HasColumnType("int");

                    b.Property<string>("ValidatedByCTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ValidatedByCTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ValidatedByCTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ValidatedMileage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidatedOnDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserName");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("MileageID");

                    b.HasIndex("ValidatedByCTAMUserName");

                    b.HasIndex("ValidatedByCTAMUserUID");

                    b.ToTable("MileageRegistration","Mileage");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CancelledByCTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CancelledByCTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CancelledByCTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CancelledDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("EndDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalReservationCallBackInfo")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ExternalReservationNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ExternalReservationSourceType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsAdhoc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteForUser")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("PutDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ReservationRecurrencyScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TakeDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserName");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("CancelledByCTAMUserName");

                    b.HasIndex("CancelledByCTAMUserUID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("ReservationRecurrencyScheduleID");

                    b.ToTable("Reservation","Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationCabinetPosition", b =>
                {
                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID", "CabinetPositionID");

                    b.HasIndex("CabinetPositionID");

                    b.ToTable("ReservationCabinetPosition","Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationItem", b =>
                {
                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CabinetName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ReservationID", "ItemID", "CabinetNumber");

                    b.HasIndex("CabinetName");

                    b.HasIndex("CabinetNumber");

                    b.HasIndex("ItemID");

                    b.ToTable("ReservationItem","Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationRecurrencySchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Friday")
                        .HasColumnType("bit");

                    b.Property<int?>("Interval")
                        .HasColumnType("int");

                    b.Property<bool?>("Monday")
                        .HasColumnType("bit");

                    b.Property<int?>("MonthOfYear")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceFrequency")
                        .HasColumnType("int");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("bit");

                    b.Property<int?>("WeekOfMonth")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ReservationRecurrencySchedule","Reservation");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CTAMModule")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description", "CTAMModule")
                        .IsUnique();

                    b.ToTable("CTAMPermission","UserRole");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(5728),
                            Description = "Swap",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6102)
                        },
                        new
                        {
                            ID = 3,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6801),
                            Description = "Return",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6827)
                        },
                        new
                        {
                            ID = 4,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6842),
                            Description = "Pickup",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6843)
                        },
                        new
                        {
                            ID = 5,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6845),
                            Description = "Borrow",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6846)
                        },
                        new
                        {
                            ID = 6,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6849),
                            Description = "Repair",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6850)
                        },
                        new
                        {
                            ID = 7,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6852),
                            Description = "Replace",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6853)
                        },
                        new
                        {
                            ID = 8,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6855),
                            Description = "Remove",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6857)
                        },
                        new
                        {
                            ID = 9,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6859),
                            Description = "Add",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6861)
                        },
                        new
                        {
                            ID = 10,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6862),
                            Description = "Read",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6864)
                        },
                        new
                        {
                            ID = 11,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6865),
                            Description = "Write",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6866)
                        },
                        new
                        {
                            ID = 12,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6868),
                            Description = "Delete",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6869)
                        },
                        new
                        {
                            ID = 13,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6871),
                            Description = "Admin",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 432, DateTimeKind.Utc).AddTicks(6873)
                        });
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFromDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntilDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("CTAMRole","UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole_Permission", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<int>("CTAMPermissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CTAMRoleID", "CTAMPermissionID");

                    b.HasIndex("CTAMPermissionID");

                    b.HasIndex("CTAMRoleID", "CTAMPermissionID")
                        .IsUnique();

                    b.ToTable("CTAMRole_Permission","UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CTAMModule")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ParName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ParValue")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ParName", "CTAMModule")
                        .IsUnique();

                    b.ToTable("CTAMSetting","UserRole");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(3245),
                            ParName = "email_default_language",
                            ParValue = "nl-NL",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(3881)
                        },
                        new
                        {
                            ID = 4,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(4351),
                            ParName = "hwapi_timeout",
                            ParValue = "30",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(4386)
                        },
                        new
                        {
                            ID = 5,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(4442),
                            ParName = "should_send_cabinet_login",
                            ParValue = "false",
                            UpdateDT = new DateTime(2021, 12, 15, 14, 25, 28, 434, DateTimeKind.Utc).AddTicks(4443)
                        });
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CardCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsPasswordTemporary")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("LoginCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PinCode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("UID");

                    b.HasIndex("CardCode")
                        .IsUnique()
                        .HasFilter("[CardCode] IS NOT NULL AND [CardCode] <> ''");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginCode")
                        .IsUnique()
                        .HasFilter("[LoginCode] IS NOT NULL");

                    b.HasIndex("PinCode");

                    b.ToTable("CTAMUser","UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser_Role", b =>
                {
                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("CTAMUserUID", "CTAMRoleID");

                    b.HasIndex("CTAMRoleID", "CTAMUserUID")
                        .IsUnique();

                    b.ToTable("CTAMUser_Role","UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.ManagementLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CTAMUserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ManagementLog","UserRole");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CTAMRole_Cabinet", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CTAMRole_Cabinets")
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAccessInterval", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCell", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetCellType", "CabinetCellType")
                        .WithMany()
                        .HasForeignKey("CabinetCellTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetColumn", "CabinetColumn")
                        .WithMany()
                        .HasForeignKey("CabinetColumnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetColumn", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CabinetColumns")
                        .HasForeignKey("CabinetNumber");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetCellType", "CabinetCellType")
                        .WithMany()
                        .HasForeignKey("CabinetCellTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetDoor", "CabinetDoor")
                        .WithMany()
                        .HasForeignKey("CabinetDoorID");

                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CabinetPositions")
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetProperties", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithOne("CabinetProperties")
                        .HasForeignKey("CabinetModule.ApplicationCore.Entities.CabinetProperties", "CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailQueue", b =>
                {
                    b.HasOne("CommunicationModule.ApplicationCore.Entities.MailMarkupTemplate", "MailMarkupTemplate")
                        .WithMany()
                        .HasForeignKey("MailMarkupTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.AllowedCabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserInPossession", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserPersonalItem", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany()
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "ReplacementItem")
                        .WithMany()
                        .HasForeignKey("ReplacementItemID");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetPositionContent", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetStock", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.ItemToPick", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany()
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.CTAMRole_ItemType", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("CTAMRole_ItemType")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.Item", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.ErrorCode", "ErrorCode")
                        .WithMany("Items")
                        .HasForeignKey("ErrorCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemDetail", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany("ItemDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemSet", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithOne("ItemSet")
                        .HasForeignKey("ItemModule.ApplicationCore.Entities.ItemSet", "ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType_ErrorCode", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.ErrorCode", "ErrorCode")
                        .WithMany("ItemType_ErrorCode")
                        .HasForeignKey("ErrorCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("ItemType_ErrorCode")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.Mileage", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.MileageRegistration", b =>
                {
                    b.HasOne("MileageModule.ApplicationCore.Entities.Mileage", "Mileage")
                        .WithMany("MileageRegistrations")
                        .HasForeignKey("MileageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.Reservation", b =>
                {
                    b.HasOne("ReservationModule.ApplicationCore.Entities.ReservationRecurrencySchedule", "ReservationRecurrencySchedule")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationRecurrencyScheduleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationCabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationModule.ApplicationCore.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationItem", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationModule.ApplicationCore.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole_Permission", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMPermission", "CTAMPermission")
                        .WithMany("CTAMRole_Permission")
                        .HasForeignKey("CTAMPermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany("CTAMRole_Permission")
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser_Role", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany("CTAMUser_CTAMRoles")
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany("CTAMUser_CTAMRoles")
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
