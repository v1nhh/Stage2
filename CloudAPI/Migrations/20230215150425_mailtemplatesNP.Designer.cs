// <auto-generated />
using System;
using CTAM.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudAPI.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20230215150425_mailtemplatesNP")]
    partial class mailtemplatesNP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.Cabinet", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CabinetConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CabinetErrorMessage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CabinetType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CabinetUIUpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("HasSwipeCardAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationDescr")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LoginMethod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("Cabinet", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAccessInterval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("EndWeekDayNr")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("StartWeekDayNr")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CTAMRoleID");

                    b.ToTable("CabinetAccessIntervals", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CabinetName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ErrorCodeDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PositionAlias")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PutItemDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PutItemID")
                        .HasColumnType("int");

                    b.Property<string>("TakeItemDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TakeItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetAction", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCell", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CabinetCellTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CabinetColumnID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CabinetCellTypeID");

                    b.HasIndex("CabinetColumnID");

                    b.ToTable("CabinetCell", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCellType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LongDescr")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortDescr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpecCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SpecType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ShortDescr")
                        .IsUnique()
                        .HasFilter("[ShortDescr] IS NOT NULL");

                    b.HasIndex("SpecCode")
                        .IsUnique()
                        .HasFilter("[SpecCode] IS NOT NULL");

                    b.ToTable("CabinetCellType", "Cabinet");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Color = "None",
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7937),
                            Depth = 30.0,
                            Height = 30.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 30x30x30",
                            SpecCode = "L30",
                            SpecType = 0,
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7939),
                            Width = 30.0
                        },
                        new
                        {
                            ID = 2,
                            Color = "None",
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7943),
                            Depth = 0.0,
                            Height = 0.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Insert",
                            ShortDescr = "KeyCop Insert",
                            SpecCode = "I",
                            SpecType = 1,
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7943),
                            Width = 0.0
                        },
                        new
                        {
                            ID = 3,
                            Color = "Red",
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7945),
                            Depth = 30.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 30x15x30",
                            SpecCode = "L15",
                            SpecType = 0,
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7945),
                            Width = 30.0
                        },
                        new
                        {
                            ID = 4,
                            Color = "Red",
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7946),
                            Depth = 45.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 45x45x15",
                            SpecCode = "L45",
                            SpecType = 0,
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7946),
                            Width = 45.0
                        },
                        new
                        {
                            ID = 5,
                            Color = "Red",
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7947),
                            Depth = 45.0,
                            Height = 15.0,
                            LockType = "Type of lock",
                            LongDescr = "",
                            Material = "Metal",
                            ShortDescr = "Locker 45x20x15",
                            SpecCode = "L20",
                            SpecType = 0,
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 157, DateTimeKind.Utc).AddTicks(7947),
                            Width = 20.0
                        });
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetColumn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CabinetNumber");

                    b.ToTable("CabinetColumn", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetDoor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Alias")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("ClosedLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("GPIOPortDoorControl")
                        .HasColumnType("int");

                    b.Property<int>("GPIOPortDoorState")
                        .HasColumnType("int");

                    b.Property<int>("MaxOpenDuration")
                        .HasColumnType("int");

                    b.Property<int>("UnlockDuration")
                        .HasColumnType("int");

                    b.Property<bool>("UnlockLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetDoor", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CabinetName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CabinetLog", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BladeNo")
                        .HasColumnType("int");

                    b.Property<int>("BladePosNo")
                        .HasColumnType("int");

                    b.Property<int>("CabinetCellTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CabinetDoorID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsAllocated")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNrOfItems")
                        .HasColumnType("int");

                    b.Property<string>("PositionAlias")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PositionNumber")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CabinetCellTypeID");

                    b.HasIndex("CabinetDoorID");

                    b.HasIndex("CabinetNumber", "PositionAlias")
                        .IsUnique()
                        .HasFilter("[PositionAlias] IS NOT NULL");

                    b.HasIndex("CabinetNumber", "PositionNumber")
                        .IsUnique();

                    b.ToTable("CabinetPosition", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetProperties", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("HwApiVersion")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LocalApiVersion")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LocalUiVersion")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("CabinetProperties", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetUI", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Font")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoBlack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoWhite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber");

                    b.ToTable("CabinetUI", "Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CTAMRole_Cabinet", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("CTAMRoleID", "CabinetNumber");

                    b.HasIndex("CabinetNumber", "CTAMRoleID")
                        .IsUnique();

                    b.ToTable("CTAMRole_Cabinet", "Cabinet");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.APISetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("API_HEADERS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("API_KEY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("API_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int>("CrudOperation")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("APISetting", "Communication");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            API_HEADERS = "{\"HeaderName1\":\"HeaderValue1\",\"HeaderName2\":\"HeaderValue2\"}",
                            API_KEY = "key1",
                            API_URL = "http://localhost:5001/api/Request/swap",
                            Active = 1,
                            CrudOperation = 1,
                            IntegrationSystem = "CTAM Universeel",
                            RequestT = "CloudAPI.ApplicationCore.DTO.Requests.SwapNationalePolitieRequest",
                            ResponseT = "CloudAPI.ApplicationCore.DTO.Responses.SwapNationalePolitieResponse",
                            TriggerName = "SEND_DEFECT_ON_SWAP"
                        },
                        new
                        {
                            ID = 2,
                            API_HEADERS = "{}",
                            API_KEY = "key2",
                            API_URL = "http://localhost:5001/api/Request/swap",
                            Active = 1,
                            CrudOperation = 2,
                            IntegrationSystem = "CTAM Universeel",
                            RequestT = "CloudAPI.ApplicationCore.DTO.Requests.SwapNationalePolitieRequest",
                            ResponseT = "CloudAPI.ApplicationCore.DTO.Responses.SwapNationalePolitieResponse",
                            TriggerName = "SEND_DEFECT_ON_SWAP"
                        },
                        new
                        {
                            ID = 3,
                            API_HEADERS = "{}",
                            API_KEY = "key3",
                            API_URL = "http://localhost:5001/api/Request/repaired",
                            Active = 1,
                            CrudOperation = 1,
                            IntegrationSystem = "CTAM Universeel",
                            RequestT = "CloudAPI.ApplicationCore.DTO.Requests.RepairedNationalePolitieRequest",
                            ResponseT = "CloudAPI.ApplicationCore.DTO.Responses.RepairedNationalePolitieResponse",
                            TriggerName = "SEND_REPAIRED"
                        },
                        new
                        {
                            ID = 4,
                            API_HEADERS = "{}",
                            API_KEY = "key4",
                            API_URL = "http://localhost:5001/api/Request/repaired",
                            Active = 1,
                            CrudOperation = 6,
                            IntegrationSystem = "CTAM Universeel",
                            RequestT = "CloudAPI.ApplicationCore.DTO.Requests.RepairedNationalePolitieRequest",
                            ResponseT = "CloudAPI.ApplicationCore.DTO.Responses.RepairedNationalePolitieResponse",
                            TriggerName = "SEND_REPAIRED"
                        },
                        new
                        {
                            ID = 5,
                            API_HEADERS = "{}",
                            API_KEY = "key5",
                            API_URL = "http://localhost:5001/api/Request/requestTaakNummer",
                            Active = 1,
                            CrudOperation = 1,
                            IntegrationSystem = "CTAM Universeel",
                            RequestT = "CloudAPI.ApplicationCore.DTO.Requests.GetRTNNationalePolitieRequest",
                            ResponseT = "CloudAPI.ApplicationCore.DTO.Responses.GetRTNNationalePolitieResponse",
                            TriggerName = "GET-RTN"
                        });
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailMarkupTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MailMarkupTemplate", "Communication");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 173, DateTimeKind.Utc).AddTicks(4997),
                            Name = "default_ct",
                            Template = "<div>\r\n  <span style='font-size:11pt;'>\r\n  <p style='font-size:11pt;font-family:Calibri,sans-serif;margin:0;'>\r\n    {{body}}\r\n  </p>\r\n  </span>\r\n</div>\r\n"
                        });
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailQueue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<string>("LastFailedErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailCC")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MailMarkupTemplateID")
                        .HasColumnType("int");

                    b.Property<string>("MailTo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Prio")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("MailMarkupTemplateID");

                    b.ToTable("MailQueue", "Communication");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Subject")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode", "Name")
                        .IsUnique();

                    b.ToTable("MailTemplate", "Communication");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "welcome_web_and_cabinet_login",
                            Subject = "Welkom bij CTAM - uw inloggegevens",
                            Template = "Beste {{name}},<br /><br />Welkom bij CTAM!<br /><br />Uw inloggegevens<br />Gebruikersnaam: {{email}}<br />Tijdelijke wachtwoord: {{password}}<br />Login code: {{loginCode}}<br />Pincode: {{pinCode}}"
                        },
                        new
                        {
                            ID = 2,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "welcome_web_and_cabinet_login",
                            Subject = "Welcome to CTAM - your login data",
                            Template = "Dear {{name}},<br /><br />Welcome to CTAM!<br /><br />Your login details<br />Username: {{email}}<br />Temporary password: {{password}}<br />Login code: {{loginCode}}<br />Pin code: {{pinCode}}"
                        },
                        new
                        {
                            ID = 3,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "welcome_web_login",
                            Subject = "Welkom bij de IBK-Beheerapplicatie",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nEr is voor jou een account aangemaakt voor de applicatie waarmee de Intelligente BeheerKasten (IBK’s) beheerd kunnen worden. Door op de link te klikken kom je bij het inlogscherm van de IBK-Beheerapplicatie:<br />\r\n<a href='{{link}}' target='_blank' >IBK beheer applicatie</a> <br />\r\n<br />\r\nJouw inloggegevens:<br />\r\n<br />\r\nGebruikersnaam: Dit is je emailadres met NP+personeelsnummer (bijvoorbeeld NP123456@politie.nl). Jouw personeelsnummer kun je vinden door jezelf op te zoeken in <a href='https://blue.politie.local/blueconnect/overview'>BlueConnect</a>.<br />\r\nTijdelijk wachtwoord: {{password}}<br />\r\n<br />\r\nWijzig direct na het inloggen jouw wachtwoord! Een wachtwoord moet minstens uit 6 karakters bestaan waarvan minimaal 1 hoofdletter, 1 kleine letter en 1 cijfer.<br />\r\n<br />\r\nZie voor meer uitleg, <a href='https://blue.politie.local/ibk-faq'>hulp en FAQ</a>.<br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 4,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "welcome_web_login",
                            Subject = "Welcome to CTAM - your login data",
                            Template = "Dear {{name}},<br /><br />Welcome to CTAM!<br /><br />Your login details<br />Username: {{email}}<br />Temporary password: {{password}}"
                        },
                        new
                        {
                            ID = 5,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "temporary_password",
                            Subject = "Reset wachtwoord voor IBK-Beheerapplicatie",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nJe hebt een wachtwoord-reset aangevraagd, jouw tijdelijke wachtwoord is {{password}}.<br />\r\n<br />\r\nVerander jouw tijdelijke wachtwoord gelijk na het inloggen. Een wachtwoord moet minstens uit 6 karakters bestaan waarvan minimaal 1 hoofdletter, 1 kleine-letter en 1 cijfer.<br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 6,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "temporary_password",
                            Subject = "Reset password",
                            Template = "Dear {{name}},<br /><br />Your temporary password is {{password}}<br />Change it as soon as you login!"
                        },
                        new
                        {
                            ID = 7,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "password_changed",
                            Subject = "Nieuw wachtwoord voor IBK-Beheerapplicatie",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nJouw wachtwoordwijziging voor de IBK-Beheerapplicatie is succesvol doorgevoerd! <br />\r\n<a href='{{link}}' target='_blank'>IBK beheer applicatie</a> <br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 8,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "password_changed",
                            Subject = "New password",
                            Template = "Dear {{name}},<br /><br />Your password has been changed successfully!"
                        },
                        new
                        {
                            ID = 9,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "forgot_password",
                            Subject = "Wachtwoord van de IBK-Beheerapplicatie vergeten",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nJe ontvangt deze e-mail omdat je onlangs op de knop 'Wachtwoord vergeten' hebt gedrukt in de IBK-Beheerapplicatie.<br />\r\n<br />\r\nKlik op de onderstaande link om jouw wachtwoord te wijzigen. Een wachtwoord moet minstens uit 6 karakters bestaan waarvan minimaal 1 hoofdletter, 1 kleine-letter en 1 cijfer.<br />\r\n<br />\r\n<a href='{{link}}' target='_blank'>Wachtwoord wijzigen</a><br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 10,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "forgot_password",
                            Subject = "Forgot password",
                            Template = "Dear {{name}},<br /><br />Click the link below to change your password.<br /><br /><a href='{{link}}' target='_blank'>Change password</a><br /><br />You’re receiving this email because you recently pressed 'Forgot password' button on website of CaptureTech. If you did not initiate this change, please contact your administrator immediately."
                        },
                        new
                        {
                            ID = 11,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "user_modified",
                            Subject = "Wijziging gegevens binnen de IBK-Beheerapplicatie",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nBinnen de IBK-Beheerapplicatie zijn jouw gegevens aangepast, de wijziging is:<br />\r\n<br />\r\n<table>{{changes}}</table><br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 12,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "user_modified",
                            Subject = "Your changes",
                            Template = "Dear {{name}},<br /><br />Review your changes below:<br /><br /><table>{{changes}}</table>"
                        },
                        new
                        {
                            ID = 13,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "user_deleted",
                            Subject = "IBK-account is uit de IBK-Beheerapplicatie verwijderd",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nJouw IBK-account is verwijderd door de Functioneel Beheerder. Dit houdt in dat je vanaf nu niet meer van een IBK gebruik kunt maken.<br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 14,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "user_deleted",
                            Subject = "Your CTAM account is deleted",
                            Template = "Dear {{name}},<br /><br />Your CTAM account is deleted by the administrator"
                        },
                        new
                        {
                            ID = 15,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "stock_below_minimum",
                            Subject = "IBK voorraad '{{itemTypeDescription}}' op '{{cabinetLocationDescr}}' is onder minimum voorraadniveau",
                            Template = "\r\nBeste Collega,<br />\r\n<br />\r\nDe voorraad van item type '{{itemTypeDescription}}' in IBK '{{cabinetName}}' op locatie '{{cabinetLocationDescr}}' is minder ({{actualStock}}) dan de opgegeven minimale voorraad ({{minimalStock}}).<br />\r\n<br />\r\nWil je er zorg voor dragen dat de voorraad van '{{itemTypeDescription}}' op locatie '{{cabinetLocationDescr}}’ op zijn minst tot het minimale voorraadniveau ({{minimalStock}}) wordt aangevuld.<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 16,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "stock_below_minimum",
                            Subject = "Cabinet stock below minimal",
                            Template = "Dear cabinet administrator,<br /><br />The cabinet stock of {{itemTypeDescription}} in cabinet '{{cabinetNumber}}, {{cabinetName}}' at location '{{cabinetLocationDescr}}' is below ({{actualStock}}) the minimal stock ({{minimalStock}})."
                        },
                        new
                        {
                            ID = 17,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "stock_at_minimum_level",
                            Subject = "IBK voorraad '{{itemTypeDescription}}' op '{{cabinetLocationDescr}}' is weer op niveau",
                            Template = "\r\nBeste Collega,<br />\r\n<br />\r\nDe voorraad van item type '{{itemTypeDescription}}' in IBK '{{cabinetName}}' op locatie '{{cabinetLocationDescr}}' is weer op of boven het opgegeven minimale voorraadniveau ({{minimalStock}}).<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 18,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "stock_at_minimum_level",
                            Subject = "Cabinet stock returned at minimal level",
                            Template = "Dear cabinet administrator,<br /><br />The cabinet stock of {{itemTypeDescription}} in cabinet '{{cabinetNumber}}, {{cabinetName}}' at location '{{cabinetLocationDescr}}' is has reached the minimal stock ({{minimalStock}} level)."
                        },
                        new
                        {
                            ID = 19,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "item_status_changed_to_defect",
                            Subject = "Item defect gemeld",
                            Template = "\r\nBeste Collega,<br />\r\n<br />\r\nItem '{{itemDescription}}' van type '{{itemTypeDescription}}' is defect gemeld door gebruiker '{{userName}}' met errorcode: '{{errorCodeDescription}}'. <br />\r\n<br />\r\nU kunt het ophalen aan de IBK '{{cabinetName}}' op positie '{{positionAlias}}'.<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 20,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "item_status_changed_to_defect",
                            Subject = "Item reported defect",
                            Template = "Dear cabinet administrator, <br /><br />Item '{{itemDescription}}' of type '{{itemTypeDescription}}' is reported defect by user '{{userName}}' with errorcode:  '{{errorCodeDescription}}'. <br /><br />You can pick it up at cabinet '{{cabinetName}}' on position '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 21,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "personal_item_status_changed_to_defect",
                            Subject = "IBK: verstoring aangemeld op {{putItemTypeDescription}} {{cabinetLocationDescr}} {{errorCode}}",
                            Template = "\r\nBeste Collega,<br />\r\n<br />\r\nItem <i>{{putItemDescription}}</i> met CI-nummer <i>'{{putItemExternalReferenceID}}'</i> van het type <i>{{putItemTypeDescription}}</i> is op <i>{{actionDT}}</i> defect gemeld door gebruiker <i>{{userName}}</i> met errorcode: <i>{{errorCode}} {{errorCodeDescription}}</i>. \r\nU kunt het ophalen aan de IBK <i>{{cabinetName}}</i> op locatie <i>{{cabinetLocationDescr}} {{cabinetDescription}}</i>.<br />\r\n<br />\r\nGebruiker <i>{{userName}}</i> heeft nu tijdelijk vervangend item <i>{{takeItemDescription}}</i> met CI-nummer <i>'{{takeItemExternalReferenceID}}'</i> van het type <i>{{takeItemTypeDescription}}</i> in gebruik.<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 22,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "personal_item_status_changed_to_defect",
                            Subject = "Defect reported {{putItemTypeDescription}} {{cabinetLocationDescr}} {{errorCodeDescription}}",
                            Template = "Item {{putItemDescription}} reported defect on {{actionDT}} by {{userName}} with error: {{errorCodeDescription}}. Cabinet {{cabinetName}} in locker {{positionAlias}} on location {{cabinetLocationDescr}}. <br /><br />User {{userName}} now has replacement item {{takeItemDescription}}."
                        },
                        new
                        {
                            ID = 23,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "personal_item_status_changed_to_repaired",
                            Subject = "Uw persoonlijke item is gerepareerd",
                            Template = "Beste {{userName}}, <br /><br />Persoonlijke item '{{itemDescription}}' van type '{{itemTypeDescription}}' is gerepareerd gemeld. <br /><br />U kunt het terug omruilen aan de IBK '{{cabinetName}}' op positie '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 24,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "personal_item_status_changed_to_repaired",
                            Subject = "Your personal item is repaired",
                            Template = "Dear {{userName}}, <br /><br />Personal item '{{itemDescription}}' of type '{{itemTypeDescription}}' is reported repaired. <br /><br />You can swap it back at cabinet '{{cabinetName}}' on position '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 25,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "personal_item_status_changed_to_replaced",
                            Subject = "Uw persoonlijke item is vervangen",
                            Template = "Beste {{userName}}, <br /><br />Persoonlijke item '{{itemDescription}}' van type '{{itemTypeDescription}}' is vervangen gemeld. <br /><br />U kunt het ophalen aan de IBK '{{cabinetName}}' op positie '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 26,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "personal_item_status_changed_to_replaced",
                            Subject = "Your personal item is replaced",
                            Template = "Dear {{userName}}, <br /><br />Personal item '{{itemDescription}}' of type '{{itemTypeDescription}}' is reported replaced. <br /><br />You can pick it up at cabinet '{{cabinetName}}' on position '{{positionAlias}}'."
                        },
                        new
                        {
                            ID = 27,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "personal_item_status_changed_to_swappedback",
                            Subject = "Agent heeft tijdelijk item bij een IBK weer ingeruild voor zijn eigen item",
                            Template = "\r\nBeste Collega,<br />\r\n<br />\r\nTijdelijk Item <i>{{putItemDescription}}</i> met nummer <i>'{{putItemExternalReferenceID}}'</i> van het type <i>{{putItemTypeDescription}}</i> is op <i>{{actionDT}}</i> door gebruiker <i>{{userName}}</i> weer ingeleverd en moet daarom in CMDB ontkoppeld worden van de gebruiker en de status ‘In stock’ krijgen. Dit tijdelijke item heeft de defectmelding: '{{errorCodeDescription}}'.<br />\r\n<br />\r\nGebruiker <i>{{userName}}</i> is sinds <i>{{actionDT}}</i> in bezit van item <i>{{takeItemDescription}}</i> met nummer <i>'{{takeItemExternalReferenceID}}'</i> van het type <i>{{takeItemTypeDescription}}</i>; in CMDB moet daarom item <i>{{takeItemDescription}}</i> met nummer <i>'{{takeItemExternalReferenceID}}'</i> gekoppeld worden aan gebruiker <i>{{userName}}</i> en de status ‘in use’ krijgen.<br />\r\n<br />\r\nGraag na de CMDB-wijzigingen de status van het incident van item <i>{{takeItemDescription}}</i> met nummer <i>'{{takeItemExternalReferenceID}}'</i> op ‘Resolved’ zetten.<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 28,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "personal_item_status_changed_to_swappedback",
                            Subject = "Temporal item {{putItemTypeDescription}} returned {{cabinetLocationDescr}} {{errorCodeDescription}}",
                            Template = "User swapped back temporary item. <br /><br />Temporal item <span style='font-style:italic'>'{{putItemDescription}}'</span> with <span style='font-style:italic'>'{{putItemExternalReferenceID}}'</span> of type <span style='font-style:italic'>'{{putItemTypeDescription}}'</span> is swapped back at <span style='font-style:italic'>'{{actionDT}}'</span> by user <span style='font-style:italic'>'{{userName}}'</span> and should be disconnected from the user and get status ‘In stock’. This temporal item has errorcode: <span style='font-style:italic'>'{{errorCodeDescription}}'</span>. <br /><br />User <span style='font-style:italic'>'{{userName}}'</span> is since <span style='font-style:italic'>'{{actionDT}}'</span> in possession of item <span style='font-style:italic'>'{{takeItemDescription}}'</span> with <span style='font-style:italic'>'{{takeItemExternalReferenceID}}'</span> of type <span style='font-style:italic'>'{{takeItemTypeDescription}}'</span>; in CMDB the item <span style='font-style:italic'>'{{takeItemDescription}}'</span> with <span style='font-style:italic'>'{{takeItemExternalReferenceID}}'</span> should be disconnected from user <span style='font-style:italic'>'{{userName}}'</span> and get status ‘in use’. <br /><br />Please after CMDB-changed put the status of the incident of item <span style='font-style:italic'>'{{takeItemDescription}}'</span> with <span style='font-style:italic'>'{{takeItemExternalReferenceID}}'</span> to ‘Resolved’."
                        },
                        new
                        {
                            ID = 29,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "welcome_cabinet_login",
                            Subject = "Registreer je pas bij een Intelligente BeheerKast",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nVanaf nu kun je je defecte C2000 portofoon direct en 24x7 omruilen voor een werkend tijdelijk exemplaar bij een onbemande Intelligente BeheerKast (IBK). Registreer zo snel mogelijk hiervoor je pas. In deze mail kun je lezen hoe je dit kunt doen.<br />\r\n<br />\r\n<b>Op tien locaties</b><br />\r\nEerder moest je voor een portofoon-reparatie een afspraak maken bij een LO-Servicebalie. <br />\r\nVerdeeld over de eenheid Den Haag vind je nu tien onbemande IBK’s waar je direct en 24x7 terecht kunt om een defecte portofoon om te ruilen voor een werkend tijdelijk exemplaar. Als jouw portofoon gerepareerd is, krijg je hiervan automatisch een melding en kun je de tijdelijke portofoon bij dezelfde IBK weer omruilen voor jouw eigen portofoon.<br />\r\n<br />\r\n<b>Registreer je pas met onderstaande pincode</b><br />\r\nOm jezelf als IBK-gebruiker te registeren, moet jouw pas eenmalig gekoppeld worden aan het IBK-systeem. Dit kun je vandaag al doen zodat je later, in geval van een portofoon-defect direct geholpen kunt worden.<br />\r\n<ol>\r\n<li>Ga naar een IBK (klik <a href='https://blue.politie.local/ibk-locaties'>hier</a> voor een lijst met IBK-locaties binnen jouw Eenheid).</li>\r\n<li>Druk op de knop ‘Nieuwe pas koppelen’ op het IBK-scherm.</li>\r\n<li>Voer in het veld ‘Vul usercode in’ jouw 6-cijferig personeelsnummer in. Jouw personeelsnummer kun je vinden door jezelf op te zoeken in <a href='https://blue.politie.local/blueconnect/overview'>BlueConnect</a>.</li>\r\n<li>Voer in het veld ‘Vul pincode in’ de pincode ‘{{pinCode}}’ in.</li>\r\n<li>Scan jouw politie-toegangspas bij de kaartlezer onder het scherm (dit is dezelfde pas die toegang geeft tot de politiepanden/locaties).<br />\r\nHet groene scherm met ‘pas koppelen geslaagd’ geeft vervolgens aan dat alles goed gegaan is en dat je vanaf nu met een defecte portofoon altijd snel geholpen kunt worden bij een willekeurige IBK van jouw eenheid.</li>\r\n</ol>\r\n<br />\r\n<b>Nu alleen voor portofoon 'basis'</b><br />\r\nOp dit moment kunnen alleen portofoons met de fleetmap 'Basis' gerepareerd worden met behulp van de IBK’s. In de nabije toekomst zullen er nog meer fleetmaps en items in geplaatst gaan worden.<br />\r\n<br />\r\nZie voor meer uitleg, <a href='https://blue.politie.local/ibk-faq'>hulp en FAQ</a>.<br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 30,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "welcome_cabinet_login",
                            Subject = "Your pincode for cabinet login",
                            Template = "Dear {{userName}},<br /><br />Your pincode is {{pinCode}}."
                        },
                        new
                        {
                            ID = 31,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "nl-NL",
                            Name = "pincode_changed",
                            Subject = "Nieuwe pincode voor Intelligente BeheerKasten (IBK)",
                            Template = "\r\nBeste collega,<br />\r\n<br />\r\nEr is voor jou een nieuwe pincode aangemaakt waarmee je een toegangspas kunt koppelen aan jouw IBK-account. Jouw nieuwe pincode is: {{pinCode}}<br />\r\n<ol>\r\n<li>Ga naar een IBK (klik <a href='https://blue.politie.local/ibk-locaties'>hier</a> voor een lijst met IBK-locaties binnen jouw Eenheid).</li>\r\n<li>Druk op de knop ‘Nieuwe pas koppelen’ op het IBK-scherm.</li>\r\n<li>Voer in het veld ‘Vul usercode in’ jouw 6-cijferig personeelsnummer in. Jouw personeelsnummer kun je vinden door jezelf op te zoeken in <a href='https://blue.politie.local/blueconnect/overview'>BlueConnect</a>.</li>\r\n<li>Voer in het veld ‘Vul pincode in’ de nieuwe pincode ‘{{pinCode}}’ in.</li>\r\n<li>Scan jouw politie-toegangspas bij de kaartlezer onder het scherm (dit is dezelfde pas die toegang geeft tot de politiepanden/locaties).<br />\r\nHet groene scherm met ‘pas koppelen geslaagd’ geeft vervolgens aan dat alles goed gegaan is en dat je vanaf nu met een defecte portofoon altijd snel geholpen kunt worden bij een willekeurige IBK van jouw eenheid.</li>\r\n</ol>\r\n<br />\r\nZie voor meer uitleg, <a href='https://blue.politie.local/ibk-faq'>hulp en FAQ</a>.<br />\r\n<br />\r\nHeb je hier vragen over, neem dan contact op met Functioneel Beheer IBK.<br />\r\n<a href=\"mailto:intelligente-beheerkasten.ict@politie.nl\">intelligente-beheerkasten.ict@politie.nl</a><br />\r\n<br />\r\nMet vriendelijke groet,<br />\r\nFunctioneel Beheer Intelligente BeheerKasten (IBK)<br />\r\n<br />\r\n\r\n<b>Beantwoord deze e-mail niet, deze is verzonden via een 'no-reply-adres'.</b><br />\r\n"
                        },
                        new
                        {
                            ID = 32,
                            CreateDT = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en-US",
                            Name = "pincode_changed",
                            Subject = "Reset pincode",
                            Template = "Dear {{name}},<br /><br />Your new pincode is {{pinCode}}<br />"
                        });
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.Request", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("APISettingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalRequestID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferredRequestID")
                        .HasColumnType("int");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("APISettingID");

                    b.HasIndex("ReferredRequestID");

                    b.ToTable("Request", "Communication");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.AllowedCabinetPosition", b =>
                {
                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBaseCabinetPosition")
                        .HasColumnType("bit");

                    b.HasKey("CabinetPositionID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("AllowedCabinetPosition", "ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetPositionContent", b =>
                {
                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetPositionID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("CabinetPositionContent", "ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetStock", b =>
                {
                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ActualStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimalStock")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CabinetNumber", "ItemTypeID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("CabinetStock", "ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserInPossession", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CTAMUserEmailIn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserEmailOut")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserNameIn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserNameOut")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserUIDIn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CTAMUserUIDOut")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CabinetNameIn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetNameOut")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetNumberIn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CabinetNumberOut")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CabinetPositionIDIn")
                        .HasColumnType("int");

                    b.Property<int?>("CabinetPositionIDOut")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnBeforeDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("CTAMUserInPossession", "ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserPersonalItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CTAMUserUID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CabinetName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplacementItemID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ReplacementItemID");

                    b.ToTable("CTAMUserPersonalItem", "ItemCabinet");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.ItemToPick", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CTAMUserUID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("CabinetPositionID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemToPick", "ItemCabinet");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.CTAMRole_ItemType", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("MaxQtyToPick")
                        .HasColumnType("int");

                    b.HasKey("CTAMRoleID", "ItemTypeID");

                    b.HasIndex("ItemTypeID");

                    b.HasIndex("CTAMRoleID", "ItemTypeID")
                        .IsUnique();

                    b.ToTable("CTAMRole_ItemType", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ErrorCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasFilter("[Description] IS NOT NULL");

                    b.ToTable("ErrorCode", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("AllowReservations")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ErrorCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ExternalReferenceID")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxLendingTimeInMins")
                        .HasColumnType("int");

                    b.Property<int>("NrOfSubItems")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tagnumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("ErrorCodeID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Item", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FreeText1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeText5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ID", "ItemID")
                        .IsUnique();

                    b.ToTable("ItemDetail", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemSet", b =>
                {
                    b.Property<string>("SetCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("SetCode", "ItemID");

                    b.HasIndex("ItemID")
                        .IsUnique();

                    b.HasIndex("SetCode", "ItemID")
                        .IsUnique();

                    b.ToTable("ItemSet", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsStoredInLocker")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLendingTimeInMins")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresMileageRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("ItemType", "Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType_ErrorCode", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ErrorCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemTypeID", "ErrorCodeID");

                    b.HasIndex("ErrorCodeID");

                    b.ToTable("ItemType_ErrorCode", "Item");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.Mileage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MaxDeltaMileage")
                        .HasColumnType("int");

                    b.Property<int>("ServiceMileage")
                        .HasColumnType("int");

                    b.Property<string>("UoM")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("Mileage", "Mileage");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.MileageRegistration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MileageID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserMileage")
                        .HasColumnType("int");

                    b.Property<string>("ValidatedByCTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ValidatedByCTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ValidatedByCTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ValidatedMileage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidatedOnDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserName");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("MileageID");

                    b.HasIndex("ValidatedByCTAMUserName");

                    b.HasIndex("ValidatedByCTAMUserUID");

                    b.ToTable("MileageRegistration", "Mileage");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CancelledByCTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CancelledByCTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CancelledByCTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CancelledDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("EndDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalReservationCallBackInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExternalReservationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExternalReservationSourceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdhoc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteForUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PutDT")
                        .HasColumnType("datetime2");

                    b.Property<string>("QRCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ReservationRecurrencyScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TakeDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CTAMUserName");

                    b.HasIndex("CTAMUserUID");

                    b.HasIndex("CancelledByCTAMUserName");

                    b.HasIndex("CancelledByCTAMUserUID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("ReservationRecurrencyScheduleID");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationCabinetPosition", b =>
                {
                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("CabinetPositionID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID", "CabinetPositionID");

                    b.HasIndex("CabinetPositionID");

                    b.ToTable("ReservationCabinetPosition", "Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationItem", b =>
                {
                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("CabinetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CabinetName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ReservationID", "ItemID", "CabinetNumber");

                    b.HasIndex("CabinetName");

                    b.HasIndex("CabinetNumber");

                    b.HasIndex("ItemID");

                    b.ToTable("ReservationItem", "Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationRecurrencySchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Friday")
                        .HasColumnType("bit");

                    b.Property<int?>("Interval")
                        .HasColumnType("int");

                    b.Property<bool?>("Monday")
                        .HasColumnType("bit");

                    b.Property<int?>("MonthOfYear")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceFrequency")
                        .HasColumnType("int");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("bit");

                    b.Property<int?>("WeekOfMonth")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ReservationRecurrencySchedule", "Reservation");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CTAMModule")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description", "CTAMModule")
                        .IsUnique();

                    b.ToTable("CTAMPermission", "UserRole");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6487),
                            Description = "Swap",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6489)
                        },
                        new
                        {
                            ID = 3,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6492),
                            Description = "Return",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6493)
                        },
                        new
                        {
                            ID = 5,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6494),
                            Description = "Borrow",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6494)
                        },
                        new
                        {
                            ID = 6,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6495),
                            Description = "Repair",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6495)
                        },
                        new
                        {
                            ID = 7,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6496),
                            Description = "Replace",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6496)
                        },
                        new
                        {
                            ID = 8,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6498),
                            Description = "Remove",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6499)
                        },
                        new
                        {
                            ID = 9,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6500),
                            Description = "Add",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6501)
                        },
                        new
                        {
                            ID = 10,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6501),
                            Description = "Read",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6502)
                        },
                        new
                        {
                            ID = 11,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6503),
                            Description = "Write",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6504)
                        },
                        new
                        {
                            ID = 12,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6504),
                            Description = "Delete",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6505)
                        },
                        new
                        {
                            ID = 13,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6505),
                            Description = "Admin",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6506)
                        });
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFromDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntilDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("CTAMRole", "UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole_Permission", b =>
                {
                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<int>("CTAMPermissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("CTAMRoleID", "CTAMPermissionID");

                    b.HasIndex("CTAMPermissionID");

                    b.HasIndex("CTAMRoleID", "CTAMPermissionID")
                        .IsUnique();

                    b.ToTable("CTAMRole_Permission", "UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CTAMModule")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ParName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParValue")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ParName", "CTAMModule")
                        .IsUnique();

                    b.ToTable("CTAMSetting", "UserRole");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6642),
                            ParName = "email_default_language",
                            ParValue = "nl-NL",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6643)
                        },
                        new
                        {
                            ID = 4,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6644),
                            ParName = "hwapi_timeout",
                            ParValue = "30",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6644)
                        },
                        new
                        {
                            ID = 5,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6646),
                            ParName = "should_send_cabinet_login",
                            ParValue = "false",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6646)
                        },
                        new
                        {
                            ID = 6,
                            CTAMModule = 1,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6647),
                            ParName = "show_language_selection_on_cabinet",
                            ParValue = "false",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6647)
                        },
                        new
                        {
                            ID = 7,
                            CTAMModule = 0,
                            CreateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6649),
                            ParName = "bulk_mail_amount",
                            ParValue = "5",
                            UpdateDT = new DateTime(2023, 2, 15, 15, 4, 25, 139, DateTimeKind.Utc).AddTicks(6649)
                        });
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsPasswordTemporary")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("LastSyncTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("UID");

                    b.HasIndex("CardCode")
                        .IsUnique()
                        .HasFilter("[CardCode] IS NOT NULL AND [CardCode] <> ''");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginCode")
                        .IsUnique()
                        .HasFilter("[LoginCode] IS NOT NULL");

                    b.HasIndex("PinCode");

                    b.ToTable("CTAMUser", "UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser_Role", b =>
                {
                    b.Property<string>("CTAMUserUID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CTAMRoleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("CTAMUserUID", "CTAMRoleID");

                    b.HasIndex("CTAMRoleID", "CTAMUserUID")
                        .IsUnique();

                    b.ToTable("CTAMUser_Role", "UserRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.ManagementLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CTAMUserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CTAMUserUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ManagementLog", "UserRole");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetAccessInterval", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMRole");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetCell", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetCellType", "CabinetCellType")
                        .WithMany()
                        .HasForeignKey("CabinetCellTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetColumn", "CabinetColumn")
                        .WithMany()
                        .HasForeignKey("CabinetColumnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinetCellType");

                    b.Navigation("CabinetColumn");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetColumn", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CabinetColumns")
                        .HasForeignKey("CabinetNumber");

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetCellType", "CabinetCellType")
                        .WithMany()
                        .HasForeignKey("CabinetCellTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetDoor", "CabinetDoor")
                        .WithMany()
                        .HasForeignKey("CabinetDoorID");

                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CabinetPositions")
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("CabinetCellType");

                    b.Navigation("CabinetDoor");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CabinetProperties", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithOne("CabinetProperties")
                        .HasForeignKey("CabinetModule.ApplicationCore.Entities.CabinetProperties", "CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.CTAMRole_Cabinet", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany("CTAMRole_Cabinets")
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMRole");

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.MailQueue", b =>
                {
                    b.HasOne("CommunicationModule.ApplicationCore.Entities.MailMarkupTemplate", "MailMarkupTemplate")
                        .WithMany()
                        .HasForeignKey("MailMarkupTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailMarkupTemplate");
                });

            modelBuilder.Entity("CommunicationModule.ApplicationCore.Entities.Request", b =>
                {
                    b.HasOne("CommunicationModule.ApplicationCore.Entities.APISetting", "APISetting")
                        .WithMany()
                        .HasForeignKey("APISettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationModule.ApplicationCore.Entities.Request", "ReferredRequest")
                        .WithMany()
                        .HasForeignKey("ReferredRequestID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("APISetting");

                    b.Navigation("ReferredRequest");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.AllowedCabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinetPosition");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetPositionContent", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinetPosition");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CabinetStock", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserInPossession", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.CTAMUserPersonalItem", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany()
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "ReplacementItem")
                        .WithMany()
                        .HasForeignKey("ReplacementItemID");

                    b.Navigation("CTAMUser");

                    b.Navigation("Item");

                    b.Navigation("ReplacementItem");
                });

            modelBuilder.Entity("ItemCabinetModule.ApplicationCore.Entities.ItemToPick", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany()
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMUser");

                    b.Navigation("CabinetPosition");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.CTAMRole_ItemType", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany()
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("CTAMRole_ItemType")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMRole");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.Item", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.ErrorCode", "ErrorCode")
                        .WithMany("Items")
                        .HasForeignKey("ErrorCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ErrorCode");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemDetail", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany("ItemDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemSet", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithOne("ItemSet")
                        .HasForeignKey("ItemModule.ApplicationCore.Entities.ItemSet", "ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType_ErrorCode", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.ErrorCode", "ErrorCode")
                        .WithMany("ItemType_ErrorCode")
                        .HasForeignKey("ErrorCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemModule.ApplicationCore.Entities.ItemType", "ItemType")
                        .WithMany("ItemType_ErrorCode")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ErrorCode");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.Mileage", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.MileageRegistration", b =>
                {
                    b.HasOne("MileageModule.ApplicationCore.Entities.Mileage", "Mileage")
                        .WithMany("MileageRegistrations")
                        .HasForeignKey("MileageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mileage");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.Reservation", b =>
                {
                    b.HasOne("ReservationModule.ApplicationCore.Entities.ReservationRecurrencySchedule", "ReservationRecurrencySchedule")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationRecurrencyScheduleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReservationRecurrencySchedule");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationCabinetPosition", b =>
                {
                    b.HasOne("CabinetModule.ApplicationCore.Entities.CabinetPosition", "CabinetPosition")
                        .WithMany()
                        .HasForeignKey("CabinetPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationModule.ApplicationCore.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinetPosition");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationItem", b =>
                {
                    b.HasOne("ItemModule.ApplicationCore.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationModule.ApplicationCore.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole_Permission", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMPermission", "CTAMPermission")
                        .WithMany("CTAMRole_Permission")
                        .HasForeignKey("CTAMPermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany("CTAMRole_Permission")
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMPermission");

                    b.Navigation("CTAMRole");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser_Role", b =>
                {
                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMRole", "CTAMRole")
                        .WithMany("CTAMUser_Roles")
                        .HasForeignKey("CTAMRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserRoleModule.ApplicationCore.Entities.CTAMUser", "CTAMUser")
                        .WithMany("CTAMUser_Roles")
                        .HasForeignKey("CTAMUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CTAMRole");

                    b.Navigation("CTAMUser");
                });

            modelBuilder.Entity("CabinetModule.ApplicationCore.Entities.Cabinet", b =>
                {
                    b.Navigation("CTAMRole_Cabinets");

                    b.Navigation("CabinetColumns");

                    b.Navigation("CabinetPositions");

                    b.Navigation("CabinetProperties");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ErrorCode", b =>
                {
                    b.Navigation("ItemType_ErrorCode");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.Item", b =>
                {
                    b.Navigation("ItemDetails");

                    b.Navigation("ItemSet");
                });

            modelBuilder.Entity("ItemModule.ApplicationCore.Entities.ItemType", b =>
                {
                    b.Navigation("CTAMRole_ItemType");

                    b.Navigation("ItemType_ErrorCode");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("MileageModule.ApplicationCore.Entities.Mileage", b =>
                {
                    b.Navigation("MileageRegistrations");
                });

            modelBuilder.Entity("ReservationModule.ApplicationCore.Entities.ReservationRecurrencySchedule", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMPermission", b =>
                {
                    b.Navigation("CTAMRole_Permission");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMRole", b =>
                {
                    b.Navigation("CTAMRole_Permission");

                    b.Navigation("CTAMUser_Roles");
                });

            modelBuilder.Entity("UserRoleModule.ApplicationCore.Entities.CTAMUser", b =>
                {
                    b.Navigation("CTAMUser_Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
